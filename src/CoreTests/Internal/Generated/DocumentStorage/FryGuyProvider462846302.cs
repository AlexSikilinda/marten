// <auto-generated/>
#pragma warning disable
using CoreTests.SessionMechanics;
using Marten.Internal;
using Marten.Internal.Storage;
using Marten.Schema;
using Marten.Schema.Arguments;
using Npgsql;
using System;
using System.Collections.Generic;
using Weasel.Core;
using Weasel.Postgresql;

namespace Marten.Generated.DocumentStorage
{
    // START: UpsertFryGuyOperation462846302
    public class UpsertFryGuyOperation462846302 : Marten.Internal.Operations.StorageOperation<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly CoreTests.SessionMechanics.SessionOptionsTests.FryGuy _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpsertFryGuyOperation462846302(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_upsert_sessionoptionstests_fryguy(?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setVersionParameter(parameters[3]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Upsert;
        }

    }

    // END: UpsertFryGuyOperation462846302
    
    
    // START: InsertFryGuyOperation462846302
    public class InsertFryGuyOperation462846302 : Marten.Internal.Operations.StorageOperation<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly CoreTests.SessionMechanics.SessionOptionsTests.FryGuy _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public InsertFryGuyOperation462846302(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_insert_sessionoptionstests_fryguy(?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setVersionParameter(parameters[3]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
        }


        public override System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            // Nothing
            return System.Threading.Tasks.Task.CompletedTask;
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Insert;
        }

    }

    // END: InsertFryGuyOperation462846302
    
    
    // START: UpdateFryGuyOperation462846302
    public class UpdateFryGuyOperation462846302 : Marten.Internal.Operations.StorageOperation<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly CoreTests.SessionMechanics.SessionOptionsTests.FryGuy _document;
        private readonly System.Guid _id;
        private readonly System.Collections.Generic.Dictionary<System.Guid, System.Guid> _versions;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public UpdateFryGuyOperation462846302(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, System.Guid id, System.Collections.Generic.Dictionary<System.Guid, System.Guid> versions, Marten.Schema.DocumentMapping mapping) : base(document, id, versions, mapping)
        {
            _document = document;
            _id = id;
            _versions = versions;
            _mapping = mapping;
        }


        public const string COMMAND_TEXT = "select public.mt_update_sessionoptionstests_fryguy(?, ?, ?, ?)";


        public override string CommandText()
        {
            return COMMAND_TEXT;
        }


        public override NpgsqlTypes.NpgsqlDbType DbType()
        {
            return NpgsqlTypes.NpgsqlDbType.Uuid;
        }


        public override void ConfigureParameters(Npgsql.NpgsqlParameter[] parameters, CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session)
        {
            parameters[0].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Jsonb;
            parameters[0].Value = session.Serializer.ToJson(_document);
            // .Net Class Type
            parameters[1].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Varchar;
            parameters[1].Value = _document.GetType().FullName;
            parameters[2].NpgsqlDbType = NpgsqlTypes.NpgsqlDbType.Uuid;
            parameters[2].Value = document.Id;
            setVersionParameter(parameters[3]);
        }


        public override void Postprocess(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions)
        {
            storeVersion();
            postprocessUpdate(reader, exceptions);
        }


        public override async System.Threading.Tasks.Task PostprocessAsync(System.Data.Common.DbDataReader reader, System.Collections.Generic.IList<System.Exception> exceptions, System.Threading.CancellationToken token)
        {
            storeVersion();
            await postprocessUpdateAsync(reader, exceptions, token);
        }


        public override Marten.Internal.Operations.OperationRole Role()
        {
            return Marten.Internal.Operations.OperationRole.Update;
        }

    }

    // END: UpdateFryGuyOperation462846302
    
    
    // START: QueryOnlyFryGuySelector462846302
    public class QueryOnlyFryGuySelector462846302 : Marten.Internal.CodeGeneration.DocumentSelectorWithOnlySerializer, Marten.Linq.Selectors.ISelector<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public QueryOnlyFryGuySelector462846302(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoreTests.SessionMechanics.SessionOptionsTests.FryGuy Resolve(System.Data.Common.DbDataReader reader)
        {

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = _serializer.FromJson<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 0);
            return document;
        }


        public async System.Threading.Tasks.Task<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = await _serializer.FromJsonAsync<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 0, token).ConfigureAwait(false);
            return document;
        }

    }

    // END: QueryOnlyFryGuySelector462846302
    
    
    // START: LightweightFryGuySelector462846302
    public class LightweightFryGuySelector462846302 : Marten.Internal.CodeGeneration.DocumentSelectorWithVersions<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>, Marten.Linq.Selectors.ISelector<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public LightweightFryGuySelector462846302(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoreTests.SessionMechanics.SessionOptionsTests.FryGuy Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = _serializer.FromJson<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }


        public async System.Threading.Tasks.Task<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = await _serializer.FromJsonAsync<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            return document;
        }

    }

    // END: LightweightFryGuySelector462846302
    
    
    // START: IdentityMapFryGuySelector462846302
    public class IdentityMapFryGuySelector462846302 : Marten.Internal.CodeGeneration.DocumentSelectorWithIdentityMap<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>, Marten.Linq.Selectors.ISelector<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public IdentityMapFryGuySelector462846302(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoreTests.SessionMechanics.SessionOptionsTests.FryGuy Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = _serializer.FromJson<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }


        public async System.Threading.Tasks.Task<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = await _serializer.FromJsonAsync<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            return document;
        }

    }

    // END: IdentityMapFryGuySelector462846302
    
    
    // START: DirtyTrackingFryGuySelector462846302
    public class DirtyTrackingFryGuySelector462846302 : Marten.Internal.CodeGeneration.DocumentSelectorWithDirtyChecking<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>, Marten.Linq.Selectors.ISelector<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>
    {
        private readonly Marten.Internal.IMartenSession _session;
        private readonly Marten.Schema.DocumentMapping _mapping;

        public DirtyTrackingFryGuySelector462846302(Marten.Internal.IMartenSession session, Marten.Schema.DocumentMapping mapping) : base(session, mapping)
        {
            _session = session;
            _mapping = mapping;
        }



        public CoreTests.SessionMechanics.SessionOptionsTests.FryGuy Resolve(System.Data.Common.DbDataReader reader)
        {
            var id = reader.GetFieldValue<System.Guid>(0);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = _serializer.FromJson<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 1);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }


        public async System.Threading.Tasks.Task<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy> ResolveAsync(System.Data.Common.DbDataReader reader, System.Threading.CancellationToken token)
        {
            var id = await reader.GetFieldValueAsync<System.Guid>(0, token);
            if (_identityMap.TryGetValue(id, out var existing)) return existing;

            CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document;
            document = await _serializer.FromJsonAsync<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>(reader, 1, token).ConfigureAwait(false);
            _session.MarkAsDocumentLoaded(id, document);
            _identityMap[id] = document;
            StoreTracker(_session, document);
            return document;
        }

    }

    // END: DirtyTrackingFryGuySelector462846302
    
    
    // START: QueryOnlyFryGuyDocumentStorage462846302
    public class QueryOnlyFryGuyDocumentStorage462846302 : Marten.Internal.Storage.QueryOnlyDocumentStorage<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public QueryOnlyFryGuyDocumentStorage462846302(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.QueryOnlyFryGuySelector462846302(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: QueryOnlyFryGuyDocumentStorage462846302
    
    
    // START: LightweightFryGuyDocumentStorage462846302
    public class LightweightFryGuyDocumentStorage462846302 : Marten.Internal.Storage.LightweightDocumentStorage<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public LightweightFryGuyDocumentStorage462846302(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.LightweightFryGuySelector462846302(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: LightweightFryGuyDocumentStorage462846302
    
    
    // START: IdentityMapFryGuyDocumentStorage462846302
    public class IdentityMapFryGuyDocumentStorage462846302 : Marten.Internal.Storage.IdentityMapDocumentStorage<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public IdentityMapFryGuyDocumentStorage462846302(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.IdentityMapFryGuySelector462846302(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: IdentityMapFryGuyDocumentStorage462846302
    
    
    // START: DirtyTrackingFryGuyDocumentStorage462846302
    public class DirtyTrackingFryGuyDocumentStorage462846302 : Marten.Internal.Storage.DirtyCheckedDocumentStorage<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly Marten.Schema.DocumentMapping _document;

        public DirtyTrackingFryGuyDocumentStorage462846302(Marten.Schema.DocumentMapping document) : base(document)
        {
            _document = document;
        }



        public override System.Guid AssignIdentity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, string tenantId, Marten.Storage.IMartenDatabase database)
        {
            if (document.Id == Guid.Empty) _setter(document, Marten.Schema.Identity.CombGuidIdGeneration.NewGuid());
            return document.Id;
        }


        public override Marten.Internal.Operations.IStorageOperation Update(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpdateFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Insert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.InsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Upsert(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {

            return new Marten.Generated.DocumentStorage.UpsertFryGuyOperation462846302
            (
                document, Identity(document),
                session.Versions.ForType<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>(),
                _document
                
            );
        }


        public override Marten.Internal.Operations.IStorageOperation Overwrite(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Internal.IMartenSession session, string tenant)
        {
            throw new System.NotSupportedException();
        }


        public override System.Guid Identity(CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document)
        {
            return document.Id;
        }


        public override Marten.Linq.Selectors.ISelector BuildSelector(Marten.Internal.IMartenSession session)
        {
            return new Marten.Generated.DocumentStorage.DirtyTrackingFryGuySelector462846302(session, _document);
        }


        public override Npgsql.NpgsqlCommand BuildLoadCommand(System.Guid id, string tenant)
        {
            return new NpgsqlCommand(_loaderSql).With("id", id);
        }


        public override Npgsql.NpgsqlCommand BuildLoadManyCommand(System.Guid[] ids, string tenant)
        {
            return new NpgsqlCommand(_loadArraySql).With("ids", ids);
        }

    }

    // END: DirtyTrackingFryGuyDocumentStorage462846302
    
    
    // START: FryGuyBulkLoader462846302
    public class FryGuyBulkLoader462846302 : Marten.Internal.CodeGeneration.BulkLoader<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid>
    {
        private readonly Marten.Internal.Storage.IDocumentStorage<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid> _storage;

        public FryGuyBulkLoader462846302(Marten.Internal.Storage.IDocumentStorage<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy, System.Guid> storage) : base(storage)
        {
            _storage = storage;
        }


        public const string MAIN_LOADER_SQL = "COPY public.mt_doc_sessionoptionstests_fryguy(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string TEMP_LOADER_SQL = "COPY mt_doc_sessionoptionstests_fryguy_temp(\"mt_dotnet_type\", \"id\", \"mt_version\", \"data\") FROM STDIN BINARY";

        public const string COPY_NEW_DOCUMENTS_SQL = "insert into public.mt_doc_sessionoptionstests_fryguy (\"id\", \"data\", \"mt_version\", \"mt_dotnet_type\", mt_last_modified) (select mt_doc_sessionoptionstests_fryguy_temp.\"id\", mt_doc_sessionoptionstests_fryguy_temp.\"data\", mt_doc_sessionoptionstests_fryguy_temp.\"mt_version\", mt_doc_sessionoptionstests_fryguy_temp.\"mt_dotnet_type\", transaction_timestamp() from mt_doc_sessionoptionstests_fryguy_temp left join public.mt_doc_sessionoptionstests_fryguy on mt_doc_sessionoptionstests_fryguy_temp.id = public.mt_doc_sessionoptionstests_fryguy.id where public.mt_doc_sessionoptionstests_fryguy.id is null)";

        public const string OVERWRITE_SQL = "update public.mt_doc_sessionoptionstests_fryguy target SET data = source.data, mt_version = source.mt_version, mt_dotnet_type = source.mt_dotnet_type, mt_last_modified = transaction_timestamp() FROM mt_doc_sessionoptionstests_fryguy_temp source WHERE source.id = target.id";

        public const string CREATE_TEMP_TABLE_FOR_COPYING_SQL = "create temporary table mt_doc_sessionoptionstests_fryguy_temp as select * from public.mt_doc_sessionoptionstests_fryguy limit 0";


        public override void LoadRow(Npgsql.NpgsqlBinaryImporter writer, CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer)
        {
            writer.Write(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar);
            writer.Write(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid);
            writer.Write(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb);
        }


        public override async System.Threading.Tasks.Task LoadRowAsync(Npgsql.NpgsqlBinaryImporter writer, CoreTests.SessionMechanics.SessionOptionsTests.FryGuy document, Marten.Storage.Tenant tenant, Marten.ISerializer serializer, System.Threading.CancellationToken cancellation)
        {
            await writer.WriteAsync(document.GetType().FullName, NpgsqlTypes.NpgsqlDbType.Varchar, cancellation);
            await writer.WriteAsync(document.Id, NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(Marten.Schema.Identity.CombGuidIdGeneration.NewGuid(), NpgsqlTypes.NpgsqlDbType.Uuid, cancellation);
            await writer.WriteAsync(serializer.ToJson(document), NpgsqlTypes.NpgsqlDbType.Jsonb, cancellation);
        }


        public override string MainLoaderSql()
        {
            return MAIN_LOADER_SQL;
        }


        public override string TempLoaderSql()
        {
            return TEMP_LOADER_SQL;
        }


        public override string CreateTempTableForCopying()
        {
            return CREATE_TEMP_TABLE_FOR_COPYING_SQL;
        }


        public override string CopyNewDocumentsFromTempTable()
        {
            return COPY_NEW_DOCUMENTS_SQL;
        }


        public override string OverwriteDuplicatesFromTempTable()
        {
            return OVERWRITE_SQL;
        }

    }

    // END: FryGuyBulkLoader462846302
    
    
    // START: FryGuyProvider462846302
    public class FryGuyProvider462846302 : Marten.Internal.Storage.DocumentProvider<CoreTests.SessionMechanics.SessionOptionsTests.FryGuy>
    {
        private readonly Marten.Schema.DocumentMapping _mapping;

        public FryGuyProvider462846302(Marten.Schema.DocumentMapping mapping) : base(new FryGuyBulkLoader462846302(new QueryOnlyFryGuyDocumentStorage462846302(mapping)), new QueryOnlyFryGuyDocumentStorage462846302(mapping), new LightweightFryGuyDocumentStorage462846302(mapping), new IdentityMapFryGuyDocumentStorage462846302(mapping), new DirtyTrackingFryGuyDocumentStorage462846302(mapping))
        {
            _mapping = mapping;
        }


    }

    // END: FryGuyProvider462846302
    
    
}

